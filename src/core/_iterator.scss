/// get all gaps
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {list} $contains list of not iterable gaps to contains in iteration list
/// @return {map} gaps list
/// @example @each $name, $size in iterate-gaps(){ ...
/// @example @each $name, $size in iterate-gaps('element' 'container'){ ...
@function iterate-gaps($contains: ()) {
    // Validate
    @if (type-of($contains) != "list") {
        @error 'iterate-gaps: $contains must be list';
    }
    // Generate iteration list
    $res: ();
    @each $key, $data in $mui-gaps {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1)
                )
            );
        }
    }
    @return $res;
}

/// get all units
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {list} $contains list of not iterable units to contains in iteration list
/// @return {map} units list
/// @example @each $name, $size in iterate-units(){ ...
/// @example @each $name, $size in iterate-units(('avatar' 'notification')){ ...
@function iterate-units($contains: ()) {
    // Validate
    @if (type-of($contains) != "list") {
        @error 'iterate-units: $contains must be list';
    }
    // Generate iteration list
    $res: ();
    @each $key, $data in $mui-units {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1)
                )
            );
        }
    }
    @return $res;
}

/// get all colors
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {list} $contains list of not iterable colors to contains in iteration list
/// @return {map} colors list
/// @example @each $name, $color in iterate-colors(){ ...
/// @example @each $name, $color in iterate-colors(('teal' 'gray')){ ...
@function iterate-colors($contains: ()) {
    // Validate
    @if (type-of($contains) != "list") {
        @error 'iterate-colors: $contains must be list';
    }
    // Generate iteration list
    $res: ();
    @each $key, $data in $mui-palette {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1)
                )
            );
        }
    }
    @return $res;
}

/// get all palette color
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $variant
/// @param {list} $contains list of not iterable colors to contains in iteration list
/// @return {map} colors list
/// @example @each $name, $color in iterate-palette('900'){ ...
/// @example @each $name, $color in iterate-palette('100', ('teal' 'gray')){ ...
@function iterate-palette($variant: 500, $contains: ()) {
    // Validate
    @if (type-of($variant) != "string") {
        @error 'iterate-palette: $variant must be string';
    }
    @if (type-of($contains) != "list") {
        @error 'iterate-palette: $contains must be list';
    }
    // Generate iteration list
    $res: ();
    $colors: iterate-colors($contains);
    @each $key, $color in $colors {
        $res: map-merge(
            $res,
            (
                $key: get-palette($color, $variant)
            )
        );
    }
    @return $res;
}

/// get all font sizes
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {list} $contains list of not iterable font-sizes to contains in iteration list
/// @return {map} font sizes list
/// @example @each $name, $size in iterate-font-sizes(){ ...
/// @example @each $name, $size in iterate-font-sizes(('header' 'other')){ ...
@function iterate-font-sizes($contains: ()) {
    // Validate
    @if (type-of($contains) != "list") {
        @error 'iterate-font-sizes: $contains must be list';
    }
    // Generate iteration list
    $res: ();
    @each $key, $data in $mui-font-sizes {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1)
                )
            );
        }
    }
    @return $res;
}

/// get all font weights
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @return {map} font weights list
/// @example @each $name, $weight in iterate-font-weights(){ ...
@function iterate-font-weights() {
    @return $mui-font-weights;
}
