/// calculate color brightness
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {color} $color
/// @example $x: brightness(red);
@function brightness($color) {
    @if (type-of($color) != "color") {
        @error 'brightness: $color must be color';
    }
    @return (red($color) + green($color) + blue($color)) / (255 * 3);
}

/// calculate brightness ratio to base color
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {color} $base base color
/// @param {color} $color color to compare
/// @example $x: brightness-ratio(red, white);
@function brightness-ratio($base, $color) {
    @if (type-of($base) != "color") {
        @error 'brightness-ratio: $base must be color';
    }
    @if (type-of($color) != "color") {
        @error 'brightness-ratio: $color must be color';
    }
    @return abs(brightness($base) - brightness($color));
}

/// Compare colors to higher contrast
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {color} $base
/// @param {color} $color1
/// @param {color} $color2
/// @example $x: contrast(red, white, black);
@function contrast($base, $color1, $color2) {
    @if (type-of($base) != "color") {
        @error 'contrast: $base must be color';
    }
    @if (type-of($color1) != "color") {
        @error 'contrast: $color1 must be color';
    }
    @if (type-of($color2) != "color") {
        @error 'contrast: $color2 must be color';
    }
    @return if(
        brightness-ratio($base, $color1) > brightness-ratio($base, $color2),
        $color1,
        $color2
    );
}

///  Compare colors to lower contrast
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {color} $base
/// @param {color} $color1
/// @param {color} $color2
/// @example $x: contrast-invert(red, white, black);
@function contrast-invert($base, $color1, $color2) {
    @if (type-of($base) != "color") {
        @error 'contrast-invert: $base must be color';
    }
    @if (type-of($color1) != "color") {
        @error 'contrast-invert: $color1 must be color';
    }
    @if (type-of($color2) != "color") {
        @error 'contrast-invert: $color2 must be color';
    }
    @return if(
        brightness_ratio($base, $color1) > brightness_ratio($base, $color2),
        $color2,
        $color1
    );
}

/// Get foreground for color
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {color} $color
/// @example $x: foreground(red);
@function foreground($color) {
    @if (type-of($color) != "color") {
        @error 'foreground: $color must be color';
    }
    @return contrast($color, mix(white, $color, 95%), mix(black, $color, 95%));
}
