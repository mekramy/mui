/// Check if theme is light
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @return {boolean} return true if theme is light and false otherwise
/// @example @if(is-theme-light()){ ...
@function is-theme-light() {
    @return $--mui-theme == "light";
}

/// Get component variable
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $component component name
/// @param {string} $property property name
/// @param {any} $fallback default value if property not registered
/// @return {any} return value on found and fallback on fails
/// @example border-color: get-var('panel', 'border-color', #a7a7a7);
@function get-var($component, $property, $fallback: null) {
    // Validate
    @if (type-of($component) != "string") {
        @error 'get-var: $component must be string';
    }
    @if (type-of($property) != "string") {
        @error 'get-var: $property must be string';
    }
    // Get component property
    @if map-has-key($mui-vars, $component) {
        $componentMap: map-get($mui-vars, $component);
        @if map-has-key($componentMap, $property) {
            @return map-get($componentMap, $property);
        }
    }
    @return $fallback;
}

/// Get gap
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name gap name
/// @return {number} return gap on found and throw error on fails
/// @example margin-bottom: get-gap('element');
@function get-gap($name) {
    // Validate
    @if (type-of($name) != "string") {
        @error 'get-gap: $name must be string';
    }
    // Get gap
    @if map-has-key($mui-gaps, $name) {
        @return nth(map-get($mui-gaps, $name), 1);
    }
    // Return error
    @error "#{$name} gap not found!";
}

/// Get unit
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name unit name
/// @return {number} return unit on found and throw error on fails
/// @example width: get-unit('half');
/// @example width: get-unit('avatar');
@function get-unit($name) {
    // Validate
    @if (type-of($name) != "string") {
        @error 'get-unit: $name must be string';
    }
    // Get gap
    @if map-has-key($mui-units, $name) {
        @return nth(map-get($mui-units, $name), 1);
    }
    // Return error
    @error "#{$name} unit not found!";
}

/// Get color
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name color name
/// @return {number} return color on found and throw error on fails
/// @example background-color: get-color('primary');
@function get-color($name) {
    // Validate
    @if (type-of($name) != "string") {
        @error 'get-color: $name must be string';
    }
    // Get gap
    @if map-has-key($mui-palette, $name) {
        @return nth(map-get($mui-palette, $name), 1);
    }
    // Return error
    @error "#{$name} color not found!";
}

/// get palette for color
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name registered color name
/// @param {string} $variant
/// @return {color} return palette on success and error on fails
/// @example color: palette('primary', 900);
@function palette($name, $variant: 500) {
    @return get-palette(get-color($name), $variant);
}

/// Get font size
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name font size name
/// @return {number} return font size on found and throw error on fails
/// @example font-size: get-font-size('huge');
@function get-font-size($name) {
    // Validate
    @if (type-of($name) != "string") {
        @error 'get-font-size: $name must be string';
    }
    // Get gap
    @if map-has-key($mui-font-sizes, $name) {
        @return nth(map-get($mui-font-sizes, $name), 1);
    }
    // Return error
    @error "#{$name} font size not found!";
}

/// Get breakpoint
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name breakpoint name
/// @return {number} return breakpoint on found and throw error on fails
/// @example @media screen and (min-width: get-breakpoint('tablet')) ...
@function get-breakpoint($name) {
    // Validate
    @if (type-of($name) != "string") {
        @error 'get-breakpoint: $name must be string';
    }
    // Get gap
    @if map-has-key($mui-breakpoints, $name) {
        @return map-get($mui-breakpoints, $name);
    }
    // Return error
    @error "#{$name} breakpoint not found!";
}

/// Get font weight
/// @author m ekramy <m@ekramy.ir>
/// @access public
/// @group helpers
/// @param {string} $name font weight name
/// @return {number} return font weight on found and throw error on fails
/// @example font-weight: get-font-weight('bolder');
@function get-font-weight($name) {
    // Validate
    @if (type-of($name) != "string") {
        @error 'get-font-weight: $name must be string';
    }
    // Get gap
    @if map-has-key($mui-font-weights, $name) {
        @return map-get($mui-font-weights, $name);
    }
    // Return error
    @error "#{$name} font weight not found!";
}
